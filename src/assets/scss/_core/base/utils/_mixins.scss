/*
Mixins
*/

/*
Type.
Grabs properties from the $map to create type styles and sizes.
*/
@mixin type($family: none, $size: none, $variant: none, $style-map: $type-styles, $size-map: $type-sizes, $fallback-map: $fallback-type-styles) {

  // font styles.
  @include explodeStyles($family, $style-map, $variant);

  // fallback font styles.
  .no-webfonts & {
    @include explodeStyles($family, $fallback-map, $variant);
  }

  // sizes.
  @if map-has-key($size-map, $size) {
    $type-size: map-get($size-map, $size);
    @include font-sizes($type-size);
  }
}




/*
Explode Styles.
A helper for the type() mixin. Explodes out all the styles in the $map, replacing
anything with overriding styles defined in the _variants key in the $map that match
$variant.
*/
@mixin explodeStyles($key, $map, $variant) {

  $variants-map: ();
  $variant-map: ();

  @if map-has-key($map, $key) {
    $these-styles: map-get($map, $key);

    @if map-has-key($these-styles, '_variants') {
      $variants-map: map-get($these-styles, '_variants');

      @if map-has-key($variants-map, $variant) {
        $variant-map: map-get($variants-map, $variant);
      }
    }

    @each $key, $value in $these-styles {
      @if ($key != '_variants') {

        @if map-has-key($variant-map, $key) {
          $value: map-get($variant-map, $key);
        }

        #{$key}: $value;
      }
    }

    @each $key, $value in $variant-map {
      @if not map-has-key($these-styles, $key) {
        #{$key}: $value;
      }
    }

  }

}









/*
Clearfix.
Does the same as @extend %clearfix, but due to cascading issues sometimes you
might need to @include clearfix() instead.
*/
@mixin clearfix() {
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}









/*
Font Size.
Produces rem font sizes from px.
http://guyroutledge.co.uk/blog/simplify-font-size-with-rems/
*/
@mixin font-size($font-size) {
  font-size: $font-size * 1px;
  font-size: $font-size / 16 * 1rem;
}









/*
Font Sizes.
Generates all the font sizes for the different breakpoints.
*/
@mixin font-sizes($sizes) {
  $breakpointKeys: map-keys($breakpoints);

  // for each breakpoint...
  @for $i from 1 through length($breakpointKeys) {

    // get the breakpoint. This must exist because we're looping through the breakpoints.
    $thisBp: nth($breakpointKeys, $i);

    // get the type size that corresponds to this breakpoint. This might not exist
    // as we might have not specified one for each breakpoint.
    $thisSize: null;
    @if ( length($sizes) >= $i ) {
      $thisSize: nth($sizes, $i);
    }

    // so, if the type size does exist...
    @if ($thisSize != null) {

      // get the previous type size (if this isn't the first one), to see if it's
      // the same or not.
      $prevSize: null;
      @if ($i > 1) {
        $prevSize: nth($sizes, $i - 1);
      }

      // if it's the first breakpoint...
      @if ($prevSize == null) {

        // ...then create a new rule without a media query.
        @include font-size($thisSize);

      // if it's not the first breakpoint, but we've got a new size...
      } @elseif ($thisSize != $prevSize) {

        // ...then create a new rule with a media query.
        @include at($thisBp) {
          @include font-size($thisSize);
        }
      }
    }
  }
}









/*
Transition.
Just makes sure we use consistent speeds and easing.
*/
@mixin transition($properties, $multiplier: 1) {

  $value: unquote('');

  @if length($properties) > 1 {
    @each $prop in $properties {
      $value: $value + $prop ($transition-duration * $multiplier) $transition-easing;

      @if ($prop != last($properties)) {
        $value: $value + unquote(', ');
      }
    }
  } @else {
    $value: $properties ($transition-duration * $multiplier) $transition-easing;
  }

  transition: $value;
}









/*
Breakpoints.
*/
@mixin at($bp) {

  $breakpoint: map-get($breakpoints, $bp);

  @media (max-width: $breakpoint) {
    @content;
  }
}
