/*
	Mixins
*/

/*
Type.
Grabs properties from the $map to create type styles and sizes.
*/
@mixin type($family: none, $size: none, $variant: none, $style-map: $type-styles, $size-map: $type-sizes, $fallback-map: $fallback-type-styles) {

    // font styles.
	@include explodeStyles($family, $style-map, $variant);

	// fallback font styles.
	.no-webfonts & {
		@include explodeStyles($family, $fallback-map, $variant);
	}

    // sizes.
    @if map-has-key($size-map, $size) {
        $type-size: map-get($size-map, $size);
        @include font-sizes($type-size...);
    }
}




/*
Explode Styles.
A helper for the type() mixin. Explodes out all the styles in the $map, replacing
anything with overriding styles defined in the _variants key in the $map that match
$variant.
*/
@mixin explodeStyles($key, $map, $variant) {

	$variants-map: ();
	$variant-map: ();

	@if map-has-key($map, $key) {
        $these-styles: map-get($map, $key);

		@if map-has-key($these-styles, '_variants') {
			$variants-map: map-get($these-styles, '_variants');

			@if map-has-key($variants-map, $variant) {
				$variant-map: map-get($variants-map, $variant);
			}
		}

        @each $key, $value in $these-styles {
			@if ($key != '_variants') {

				@if map-has-key($variant-map, $key) {
					$value: map-get($variant-map, $key);
				}

				#{$key}: $value;
			}
        }

		@each $key, $value in $variant-map {
			@if not map-has-key($these-styles, $key) {
				#{$key}: $value;
			}
		}

    }

}









/*
Clearfix.
Does the same as @extend %clearfix, but due to cascading issues sometimes you
might need to @include clearfix() instead.
*/
@mixin clearfix() {
	&:before, &:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}









/*
Font Size.
Produces rem font sizes from px.
http://guyroutledge.co.uk/blog/simplify-font-size-with-rems/
*/
@mixin font-size($font-size) {
	font-size: $font-size * 1px;
	font-size: $font-size / 16 * 1rem;
}









/*
Font Sizes.
Generates all the font sizes for the different breakpoints.
*/
@mixin font-sizes($bear, $wolf, $fox, $rabbit, $mouse) {

	@include font-size($bear);

	@if ($wolf != $bear) {
		@include at-wolf {
			@include font-size($wolf);
		}
	}

	@if ($fox != $wolf) {
		@include at-fox {
			@include font-size($fox);
		}
	}

	@if ($rabbit != $fox) {
		@include at-rabbit {
			@include font-size($rabbit);
		}
	}

	@if ($mouse != $rabbit) {
		@include at-mouse {
			@include font-size($mouse);
		}
	}

}









/*
Transition.
Just makes sure we use consistent speeds and easing.
*/
@mixin transition($property, $speed: 'normal') {

	$multiplier: 1;
	@if ($speed == 'cat') {
		$multiplier: 4;
	} @elseif ($speed == 'hyena') {
		$multiplier: 2;
	} @elseif ($speed == 'lion') {
		$multiplier: 0.25;
	} @elseif ($speed == 'cheetah') {
		$multiplier: 0.1;
	}

	transition: $property ($transition-duration * $multiplier) $transition-easing;
}









/*
Breakpoints.
*/
@mixin at-bear() {
	@include susy-breakpoint(max-width $breakpoint-bear, $susy-bear) {
		@content;
	}
}

@mixin at-wolf() {
	@include susy-breakpoint(max-width $breakpoint-wolf, $susy-wolf) {
		@content;
	}
}

@mixin at-fox() {
	@include susy-breakpoint(max-width $breakpoint-fox, $susy-fox) {
		@content;
	}
}

@mixin at-rabbit() {
	@include susy-breakpoint(max-width $breakpoint-rabbit, $susy-rabbit) {
		@content;
	}
}

@mixin at-mouse() {
	@include susy-breakpoint(max-width $breakpoint-mouse, $susy-mouse) {
		@content;
	}
}
